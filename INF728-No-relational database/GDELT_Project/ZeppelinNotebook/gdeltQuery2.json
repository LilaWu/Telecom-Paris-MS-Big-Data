{"paragraphs":[{"text":"%md\n## Query 2\nHere we will try to resolve the following query:\n\npour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année\n","user":"anonymous","dateUpdated":"2020-01-23T10:25:18+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605764_-1843772087","id":"20181212-102323_67420128","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:25:18+0000","dateFinished":"2020-01-23T10:25:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2666","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 2</h2>\n<p>Here we will try to resolve the following query:</p>\n<p>pour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année</p>\n</div>"}]}},{"text":"%md Edit the interpreter spark (top right drop down menu) and add those two variables:\n```\nspark.jars.packages                         datastax:spark-cassandra-connector:2.4.0-s_2.11\nspark.cassandra.connection.host             private-ip-cassandra-node-1,private-ip-cassandra-node-2 \n```","user":"anonymous","dateUpdated":"2020-01-23T10:25:18+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605771_-435767450","id":"20200119-122507_1982817269","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:25:18+0000","dateFinished":"2020-01-23T10:25:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2667","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Edit the interpreter spark (top right drop down menu) and add those two variables:</p>\n<pre><code>spark.jars.packages                         datastax:spark-cassandra-connector:2.4.0-s_2.11\nspark.cassandra.connection.host             private-ip-cassandra-node-1,private-ip-cassandra-node-2 \n</code></pre>\n</div>"}]}},{"text":"val AWS_ID = \"TODO\"\nval AWS_KEY = \"TODO\"\nval AWS_TOKEN = \"TODO\"\nval s3_name = \"TODO\"\n\n\n\nsc.hadoopConfiguration.set(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider\")\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) // mettre votre ID du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) // mettre votre secret du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.session.token\", AWS_TOKEN)","user":"anonymous","dateUpdated":"2020-01-23T10:23:45+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605771_1609672390","id":"20171217-230735_1688540039","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:09:07+0000","dateFinished":"2020-01-23T10:09:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2668"},{"text":"%md Exportation of the Tables Events and Mentions","user":"anonymous","dateUpdated":"2020-01-23T10:25:35+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605773_368749414","id":"20200117-103749_1442620581","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:25:35+0000","dateFinished":"2020-01-23T10:25:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2670","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Exportation of the Tables Events and Mentions</p>\n</div>"}]}},{"text":"import org.apache.spark.{SparkConf, SparkContext, sql}\nimport org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport org.apache.spark.rdd.RDD\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicSessionCredentials\nimport java.io.File\n//Cassandra\nimport com.datastax.spark.connector.cql.CassandraConnector\nimport org.apache.spark.sql.cassandra._\n\n\n    val textRDDEvents: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/201901*.export.CSV.zip\").\n      flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\n    // *** Mentions ***\n    val textRDDMentions: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/201901*.mentions.CSV.zip\").\n      flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile{ case null => zis.close(); false\n            case _ => true }.\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\n    /** ************************************************************\n     * Ajout des informations colonnes et creation de deux Dataframe\n     * ************************************************************* */\n\n    // EVENTS\n\n    val dfEvents: DataFrame = textRDDEvents.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n      .withColumn(\"Day\", split($\"value\", \"\\\\t\").getItem(1))\n      .withColumn(\"MonthYear\", split($\"value\", \"\\\\t\").getItem(2))\n      .withColumn(\"Year\", split($\"value\", \"\\\\t\").getItem(3))\n      .withColumn(\"FractionDate\", split($\"value\", \"\\\\t\").getItem(4))\n      .withColumn(\"Actor1Code\", split($\"value\", \"\\\\t\").getItem(5))\n      .withColumn(\"Actor1Name\", split($\"value\", \"\\\\t\").getItem(6))\n      .withColumn(\"Actor1CountryCode\", split($\"value\", \"\\\\t\").getItem(7))\n      .withColumn(\"Actor1KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(8))\n      .withColumn(\"Actor1EthnicCode\", split($\"value\", \"\\\\t\").getItem(9))\n      .withColumn(\"Actor1Religion1Code\", split($\"value\", \"\\\\t\").getItem(10))\n      .withColumn(\"Actor1Religion2Code\", split($\"value\", \"\\\\t\").getItem(11))\n      .withColumn(\"Actor1Type1Code\", split($\"value\", \"\\\\t\").getItem(12))\n      .withColumn(\"Actor1Type2Code\", split($\"value\", \"\\\\t\").getItem(13))\n      .withColumn(\"Actor1Type3Code\", split($\"value\", \"\\\\t\").getItem(14))\n      .withColumn(\"Actor2Code\", split($\"value\", \"\\\\t\").getItem(15))\n      .withColumn(\"Actor2Name\", split($\"value\", \"\\\\t\").getItem(16))\n      .withColumn(\"Actor2CountryCode\", split($\"value\", \"\\\\t\").getItem(17))\n      .withColumn(\"Actor2KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(18))\n      .withColumn(\"Actor2EthnicCode\", split($\"value\", \"\\\\t\").getItem(19))\n      .withColumn(\"Actor2Religion1Code\", split($\"value\", \"\\\\t\").getItem(20))\n      .withColumn(\"Actor2Religion2Code\", split($\"value\", \"\\\\t\").getItem(21))\n      .withColumn(\"Actor2Type1Code\", split($\"value\", \"\\\\t\").getItem(22))\n      .withColumn(\"Actor2Type2Code\", split($\"value\", \"\\\\t\").getItem(23))\n      .withColumn(\"Actor2Type3Code\", split($\"value\", \"\\\\t\").getItem(24))\n      .withColumn(\"IsRootEvent\", split($\"value\", \"\\\\t\").getItem(25))\n      .withColumn(\"EventCode\", split($\"value\", \"\\\\t\").getItem(26))\n      .withColumn(\"EventBaseCode\", split($\"value\", \"\\\\t\").getItem(27))\n      .withColumn(\"EventRootCode\", split($\"value\", \"\\\\t\").getItem(28))\n      .withColumn(\"QuadClass\", split($\"value\", \"\\\\t\").getItem(29))\n      .withColumn(\"GoldsteinScale\", split($\"value\", \"\\\\t\").getItem(30))\n      .withColumn(\"NumMentions\", split($\"value\", \"\\\\t\").getItem(31))\n      .withColumn(\"NumSources\", split($\"value\", \"\\\\t\").getItem(32))\n      .withColumn(\"NumArticles\", split($\"value\", \"\\\\t\").getItem(33))\n      .withColumn(\"AvgTone\", split($\"value\", \"\\\\t\").getItem(34))\n      .withColumn(\"Actor1Geo_Type\", split($\"value\", \"\\\\t\").getItem(35))\n      .withColumn(\"Actor1Geo_FullName\", split($\"value\", \"\\\\t\").getItem(36))\n      .withColumn(\"Actor1Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(37))\n      .withColumn(\"Actor1Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(38))\n      .withColumn(\"Actor1Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(39))\n      .withColumn(\"Actor1Geo_Lat\", split($\"value\", \"\\\\t\").getItem(40))\n      .withColumn(\"Actor1Geo_Long\", split($\"value\", \"\\\\t\").getItem(41))\n      .withColumn(\"Actor1Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(42))\n      .withColumn(\"Actor2Geo_Type\", split($\"value\", \"\\\\t\").getItem(43))\n      .withColumn(\"Actor2Geo_FullName\", split($\"value\", \"\\\\t\").getItem(44))\n      .withColumn(\"Actor2Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(45))\n      .withColumn(\"Actor2Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(46))\n      .withColumn(\"Actor2Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(47))\n      .withColumn(\"Actor2Geo_Lat\", split($\"value\", \"\\\\t\").getItem(48))\n      .withColumn(\"Actor2Geo_Long\", split($\"value\", \"\\\\t\").getItem(49))\n      .withColumn(\"Actor2Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(50))\n      .withColumn(\"ActionGeo_Type\", split($\"value\", \"\\\\t\").getItem(51))\n      .withColumn(\"ActionGeo_FullName\", split($\"value\", \"\\\\t\").getItem(52))\n      .withColumn(\"ActionGeo_CountryCode\", split($\"value\", \"\\\\t\").getItem(53))\n      .withColumn(\"ActionGeo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(54))\n      .withColumn(\"ActionGeo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(55))\n      .withColumn(\"ActionGeo_Lat\", split($\"value\", \"\\\\t\").getItem(56))\n      .withColumn(\"ActionGeo_Long\", split($\"value\", \"\\\\t\").getItem(57))\n      .withColumn(\"ActionGeo_FeatureID\", split($\"value\", \"\\\\t\").getItem(58))\n      .withColumn(\"DATEADDED\", split($\"value\", \"\\\\t\").getItem(59))\n      .withColumn(\"SOURCEURL\", split($\"value\", \"\\\\t\").getItem(60))\n      .drop(\"value\")\n\n    // MENTIONS\n    val dfMentions: DataFrame = textRDDMentions.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n      .withColumn(\"EventTimeDate\", split($\"value\", \"\\\\t\").getItem(1))\n      .withColumn(\"MentionTimeDate\", split($\"value\", \"\\\\t\").getItem(2))\n      .withColumn(\"MentionType\", split($\"value\", \"\\\\t\").getItem(3))\n      .withColumn(\"MentionSourceName\", split($\"value\", \"\\\\t\").getItem(4))\n      .withColumn(\"MentionIdentifier\", split($\"value\", \"\\\\t\").getItem(5))\n      .withColumn(\"SentenceID\", split($\"value\", \"\\\\t\").getItem(6))\n      .withColumn(\"Actor1CharOffset\", split($\"value\", \"\\\\t\").getItem(7))\n      .withColumn(\"Actor2CharOffset\", split($\"value\", \"\\\\t\").getItem(8))\n      .withColumn(\"ActionCharOffset\", split($\"value\", \"\\\\t\").getItem(9))\n      .withColumn(\"InRawText\", split($\"value\", \"\\\\t\").getItem(10))\n      .withColumn(\"Confidence\", split($\"value\", \"\\\\t\").getItem(11))\n      .withColumn(\"MentionDocLen\", split($\"value\", \"\\\\t\").getItem(12))\n      .withColumn(\"MentionDocTone\", split($\"value\", \"\\\\t\").getItem(13))\n      .withColumn(\"MentionDocTranslationInfo\", split($\"value\", \"\\\\t\").getItem(14))\n      .withColumn(\"Extras\", split($\"value\", \"\\\\t\").getItem(15))\n      .drop(\"value\")\n","user":"anonymous","dateUpdated":"2020-01-23T10:24:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605774_-140915871","id":"20200117-103556_2139418060","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:09:08+0000","dateFinished":"2020-01-23T10:09:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2671"},{"text":"\n    val df_country_events = dfEvents.select(\"GLOBALEVENTID\",\"ActionGeo_CountryCode\", \"Day\")\n      .filter(!($\"ActionGeo_CountryCode\".isNaN || $\"ActionGeo_CountryCode\".isNull || $\"ActionGeo_CountryCode\" === \"\"))\n      .join(\n        dfMentions.select(\"MentionIdentifier\",\"GLOBALEVENTID\" ), \"GLOBALEVENTID\")\n      .withColumn(\"year\", substring($\"Day\", 0, 4))\n      .withColumn(\"month\", substring($\"Day\", 5, 2))\n      .withColumn(\"day\", substring($\"Day\", 7, 2))\n      .groupBy(\"ActionGeo_CountryCode\",\"GLOBALEVENTID\",\"year\", \"month\", \"day\")\n      .agg(count($\"MentionIdentifier\").alias(\"num_mentions\"))\n      .orderBy($\"num_mentions\".desc)\n      .withColumnRenamed(\"ActionGeo_CountryCode\",\"country\")\n      .withColumnRenamed(\"GLOBALEVENTID\",\"event\")\n      \n    df_country_events.show(10)","user":"anonymous","dateUpdated":"2020-01-23T10:13:57+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605776_-1017093885","id":"20200122-150533_419453088","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:13:57+0000","dateFinished":"2020-01-23T10:14:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2672"},{"text":"%md Processing of the data","user":"anonymous","dateUpdated":"2020-01-23T10:25:18+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605777_1323294308","id":"20200119-122641_344541628","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:25:18+0000","dateFinished":"2020-01-23T10:25:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2673","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Processing of the data</p>\n</div>"}]}},{"text":"    import org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}\n/***\n    df_country_events\n      .write\n      .mode(SaveMode.Overwrite)\n      .parquet(\"s3://\" + s3_name + \"/df_country_events.parquet/\")\n      ***/","user":"anonymous","dateUpdated":"2020-01-23T10:10:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":325,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605777_-1042505896","id":"20200117-102214_1513863359","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:10:26+0000","dateFinished":"2020-01-23T10:10:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2674"},{"text":"%md Creation of Cassandra table ","user":"anonymous","dateUpdated":"2020-01-23T10:25:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605778_-878812825","id":"20200119-122701_546900147","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:25:33+0000","dateFinished":"2020-01-23T10:25:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2675","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Creation of Cassandra table</p>\n</div>"}]}},{"text":"CassandraConnector(sc.getConf).withSessionDo { session =>\n      session.execute(\n        \"\"\"\n           CREATE KEYSPACE IF NOT EXISTS gdelt\n           WITH REPLICATION =\n           {'class': 'SimpleStrategy', 'replication_factor': 2 };\n        \"\"\")\n      session.execute(\n        \"\"\"\n           CREATE TABLE IF NOT EXISTS gdelt.country_events (\n              country text,\n              year int,\n              month int,\n              day int,\n              event int,\n              num_mentions int,\n              PRIMARY KEY (country, year, month, day, event, num_mentions)\n            );\n        \"\"\"\n      )\n}","user":"anonymous","dateUpdated":"2020-01-23T10:22:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605778_1582978812","id":"20200122-162256_468552736","dateCreated":"2020-01-23T10:00:05+0000","dateStarted":"2020-01-23T10:10:27+0000","dateFinished":"2020-01-23T10:10:27+0000","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2676"},{"text":"    df_country_events.write\n      .cassandraFormat(\"country_events\", \"gdelt\")\n      .save()","user":"anonymous","dateUpdated":"2020-01-23T10:00:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605781_-1457600298","id":"20200122-162447_1700300822","dateCreated":"2020-01-23T10:00:05+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2677"},{"text":"val query2 = spark.read\n      .cassandraFormat(\"country_events\", \"gdelt\")\n      .load()","user":"anonymous","dateUpdated":"2020-01-23T10:00:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605782_-1923234364","id":"20200122-180911_1179998160","dateCreated":"2020-01-23T10:00:05+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2678"},{"text":"query2.show(5)","user":"anonymous","dateUpdated":"2020-01-23T10:02:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605782_1772538484","id":"20200122-180922_1988734698","dateCreated":"2020-01-23T10:00:05+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2679"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-01-23T10:00:05+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579773605783_1456513135","id":"20200122-160058_898168081","dateCreated":"2020-01-23T10:00:05+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2681"}],"name":"gdeltQuery2","id":"2F1C4ER3Y","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}